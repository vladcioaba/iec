<div class="textblock">
	Intuitively, we think of expressions such as "2 < 7", "1.2 != 3.7" and "6 >= 9" as evaluating to "true" or "false"
	("!=" means "not equal to"). Such expressions can be combined using the logical operators "&&" ("and"), "||" ("or") and
	"!" ("not"), as in the following examples:
	<div class="code">
		(6 <= 6) && (5 < 3) False <br> <br> (6 <= 6) || (5 < 3) True <br> <br> (5 != 6) True <br> <br>
		(5 < 3) && (6 <= 6) || (5 != 6) True <br> <br> (5 < 3) && ((6 <= 6) || (5 != 6)) Flase <br> <br>
		!((5 < 3) && ((6 <= 6) || (5 != 6))) True
	</div>
	The fourth of these expressions is true because the operator "&&" has a higher precedence than the operator "||". You
	can check the relative precedence of the different C++ operators in a C++ programming manual or text book (see for
	example Savitch, Appendix 2). But if in doubt use ( ) parentheses, which in any case often make the program easier to
	read.
</div>

<div class="textblock">
	Compound Boolean expressions are typically used as the condition in "if statements" and "for loops". For example:
	<div class="code">
		... <br> ... <br> if (total_test_score >= 50 && total_test_score < 65) <br> cout << "You have just
		scraped through the test.\n"; <br> ... <br> ...
	</div>
</div>

<div class="textblock">
	Once again, there is an important technical point concerning Boolean expressions. In C++, "true" is represented simply
	as any non-zero integer, and "false" is represented as the value 0. This can lead to errors. For example, it is quite
	easy to type "=" instead of "==". Unfortunately, the program fragment
	<div class="code">
		... <br> ... <br> if (number_of_people = 1) <br> <span class="indent1">cout << "There is only
			one person.\n";</span> <br> ... <br> ...
	</div>
	will always result in the message "There is only one person" being output to the screen, even if the previous value of
	the variable "number_of_people" was not 1.
</div>

<div class="textblock">In this lecture we have discussed variables in more detail. We have seen how variables are
	always of a particular data type, and have listed different ways in which variables may be temporarily or permanently
	assigned values. We have also seen how new values of various types can be generated by the use of operators.</div>